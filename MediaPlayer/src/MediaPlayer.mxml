<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="710" height="358"
					   creationComplete="init()">
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
	</s:layout>
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import MediaTool.Play;
			import MediaTool.PlayList;
			import MediaTool.PlayListCollection;
			
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.SliderEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var playListcollection:PlayListCollection = new PlayListCollection();	
			private var emptyStar:String = "../assets/empty_star.png";
			private var fullStar:String = "../assets/full_star.png";
			
			//
			/// Music player
			//
			
			public var soundClip:Sound;//Create an instance of the Sound class
			public var sndChannel:SoundChannel;//Create a new SoundChannel Object
			public var loaded:Boolean = false; // on verifie que le chargement est fini avant de lancer la chanson
			public var loca:int = 0; // pour conserver le temps quand on pause
			public var snd:Number = 1; // la valeur du son
			public var isplay:Boolean = false; // pour l'alternance du bouton play/pause
			
			public var current:String = ""; // La chanson qui va etre jouÃ©e
			
			private var myTimer:Timer = new Timer( 1000, 0 );
			
			protected function onSec( pEvt:TimerEvent ):void
			{
				if (bplaypause.source == "../assets/pause.png")
					bmusicprogressbar.value = sndChannel.position;
				if (bmusicprogressbar.value == soundClip.length)
					onSoundComplete(null);
			}
			
			protected function onSoundComplete(evt:Event):void
			{
				changesong(true); //TODO
			}
			
			protected function play2():void
			{
				sndChannel=soundClip.play(loca);
				sndChannel.soundTransform = new SoundTransform (snd);
				loca = 0;
				isplay = true;
				bplaypause.source = "../assets/pause.png";
				myTimer.addEventListener( TimerEvent.TIMER, onSec );
				myTimer.start();
				sndChannel.addEventListener(Event.SOUND_COMPLETE, onSoundComplete);
			}
			
			protected function play():void
			{
				if (!isplay)
				{
					
					snd = bvolume.value / 100;
					
					if (loaded == false)
					{
						soundClip=new Sound();
						sndChannel = new SoundChannel()
						soundClip.load(new URLRequest(current));
						soundClip.addEventListener(Event.COMPLETE,onComplete,false,0,true);
					}
					else
					{	
						play2();
					}
					
					function onComplete(evt:Event):void
					{
						loaded = true;
						bmusicprogressbar.maximum = soundClip.length ;
						play2();
					}
				}
				else
				{
					loca = sndChannel.position;
					sndChannel.stop();
					isplay = false;
					bplaypause.source = "../assets/play.png";
				}
			}
			
			protected function changesong(prec:Boolean):void
			{

				if (prec)
					current = GetPreviousMusic()._path;
				else
					current = GetNextMusic()._path;
				
				loca = 0;
				loaded = false;
				sndChannel.stop();
				isplay = false;
				bplaypause.source = "../assets/play.png";
				play();
			}
			
			protected function bvolume_changeHandler(event:SliderEvent):void
			{
				sndChannel.soundTransform = new SoundTransform (bvolume.value / 100);
				snd = bvolume.value / 100;
			}
			
			protected function bmusicprogressbar_changeHandler(event:SliderEvent):void
			{
				loca = bmusicprogressbar.value;
				
				if (bplaypause.source == "../assets/pause.png")
				{
					sndChannel.stop();
					
					sndChannel=soundClip.play(loca);
				}
			}
			
			
			public function init():void
			{
				this.UpdatePlayListList();
				playListList.selectedIndex = 0;
				this.UpdateMusicList();
			}
			
			//
			// Playing Manager
			//
			
			// Play the current selected song
			protected function PlayCurrentSong():void
			{
				current = GetCurrentMusic()._path
				play();
			}
			
			// Play the previous song
			protected function PlayPreviousSong():void
			{
			    changesong(true);
			}
			
			// Play the next song
			protected function PlayNextSong():void
			{
				changesong(false);
			}
			
			
			//
			// Tweeter rate
			//
			protected function brate1_clickHandler(event:MouseEvent):void
			{
				brate2.source = emptyStar;
				brate3.source = emptyStar;
				brate4.source = emptyStar;
				brate5.source = emptyStar;
			}
			
			protected function brate2_clickHandler(event:MouseEvent):void
			{
				brate2.source = fullStar;
				brate3.source = emptyStar;
				brate4.source = emptyStar;
				brate5.source = emptyStar;
			}
			
			protected function brate3_clickHandler(event:MouseEvent):void
			{
				brate2.source = fullStar;
				brate3.source = fullStar;
				brate4.source = emptyStar;
				brate5.source = emptyStar;
			}
			
			protected function brate4_clickHandler(event:MouseEvent):void
			{
				brate2.source = fullStar;
				brate3.source = fullStar;
				brate4.source = fullStar;
				brate5.source = emptyStar;
			}
			
			protected function brate5_clickHandler(event:MouseEvent):void
			{
				brate2.source = fullStar;
				brate3.source = fullStar;
				brate4.source = fullStar;
				brate5.source = fullStar;
			}
			
			// Get the rate choose by the user
			public function get_rate():String
			{
				var cpt:int = 1;
				
				if (brate2.source == fullStar) cpt++;
				if (brate3.source == fullStar) cpt++;
				if (brate4.source == fullStar) cpt++;
				if (brate5.source == fullStar) cpt++;
				
				return String(cpt);
			}
			
			// Send the rate to the tweeter account
			protected function tweeter_clickHandler(event:MouseEvent):void
			{				
				var p:PopupTweet = new PopupTweet();
				p.open();
			}
			
			//
			// PlayList Management
			//
			
			private function AddPlayList(event:MouseEvent):void
			{
				if (textInputPlayList.text != "")
				{
					playListcollection.AddPlayList(textInputPlayList.text);
					textInputPlayList.text = "";
				}
				
				UpdatePlayListList();
			}
			
			private function RemovePlayList(event:MouseEvent):void
			{
				playListcollection.RemovePlayList(playListList.selectedItem);
				
				UpdatePlayListList();
			}								
			
			private function UpdatePlayListList():void
			{
				while (playListArray.length > 0)
					playListArray.removeItemAt(0);
				
				if (playListcollection._playListcollection.length == 0)
					playListcollection.AddPlayList("Default playlist");
				
				for(var i:int = 0; i < playListcollection._playListcollection.length; i++)
					playListArray.addItem(playListcollection._playListcollection[i]._name);
				
				playListArray.sort = new Sort();
				playListArray.refresh();
			}
			
			private function PlayListChangedHandler(event:IndexChangeEvent):void 
			{
				UpdateMusicList();
			}
			
			//
			// Music Management
			//
			protected function AddMusic(event:MouseEvent):void
			{
				if (playListList.selectedIndex != -1)
				{
					var openFile:File = new File();
					openFile.addEventListener(Event.SELECT, AddMusicComplete);
					openFile.browse();	
				}
			}
			
			private function AddMusicComplete(event:Event):void
			{
				if (playListList.selectedIndex != -1)
				{
					playListcollection.AddMusic(playListList.selectedItem, event.target.nativePath);				
					UpdateMusicList();
				}
			}
			
			protected function RemoveMusic(event:MouseEvent):void
			{
				if (playListList.selectedIndex != -1)
				{
					playListcollection.RemoveMusic(playListList.selectedItem, musicList.selectedItem);
					UpdateMusicList();
				}
			}
			
			private function UpdateMusicList():void
			{
				if (playListList.selectedIndex != -1)
				{
					while (musicArray.length > 0)
						musicArray.removeItemAt(0);
					
					var playList:PlayList = playListcollection.GetPlayList(playListList.selectedItem);
					
					if (playList != null)
						for(var i:int = 0; i < playList._playList.length; i++)
							musicArray.addItem(playList._playList[i]._name);
				}
			}
			
			// Get the Play object of the current song
			public function GetCurrentMusic():Play
			{
				return playListcollection.GetMusic(playListList.selectedItem, musicList.selectedItem);
			}
			
			// Get the Play object of the next music
			public function GetNextMusic():Play
			{
				if (musicArray.length != 0)
				{
					if (musicList.selectedIndex >= 0 && musicList.selectedIndex + 1 <= musicArray.length - 1)
					{
						musicList.selectedIndex = musicList.selectedIndex + 1;
						return  GetCurrentMusic();
					}
					else
					{
						musicList.selectedIndex = 0;
						return  GetCurrentMusic();
					}
				}
				
				return null;
			}
			
			// Get the Play object of the previous music
			public function GetPreviousMusic():Play
			{
				if (musicArray.length != 0)
				{
					if (musicList.selectedIndex - 1 >= 0)
					{
						musicList.selectedIndex = musicList.selectedIndex - 1;
						return  GetCurrentMusic();
					}
					else
					{
						musicList.selectedIndex = musicArray.length - 1;
						return  GetCurrentMusic();
					}
				}
				
				return null;
			}
			

		]]>
	</fx:Script>
	
	<s:Group width="689">
		<s:layout>
			<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" />
		</s:layout>
		<s:HGroup width="671" paddingBottom="10" verticalAlign="middle">
			<s:Image id="bprevious" width="48" height="48" smooth="true" source="assets/previous.png" click="PlayPreviousSong()"/>
			<s:Image id="bplaypause" width="60" height="60" smooth="true" source="assets/pause.png" click="PlayCurrentSong()"/>
			<s:Image id="bnext" width="48" height="48" smooth="true" source="assets/next.png" click="PlayNextSong()"/>
			<s:BorderContainer>
				<s:VGroup x="0" y="0" horizontalAlign="center" paddingBottom="8" paddingLeft="5"
						  paddingRight="5" paddingTop="15">
					<s:Label text="Artiste - Title - Album" />
					<mx:HSlider id="bmusicprogressbar" width="485"
								change="bmusicprogressbar_changeHandler(event)"/>
				</s:VGroup>
			</s:BorderContainer>
		</s:HGroup>
		<s:BorderContainer width="670">
			<s:HGroup width="671" verticalAlign="middle" paddingBottom="5" paddingTop="5" paddingLeft="10">
				<s:Label fontSize="14" text="Volume" id="vol"/>
				<s:Rect width="10"/>
				<mx:HSlider id="bvolume" width="159" change="bvolume_changeHandler(event)"
							labels="0,100" maximum="100" minimum="0" tickInterval="20"/>
				<s:Rect width="185"/>
				<s:Image id="brate1" width="30" height="30" smooth="true" source="assets/full_star.png" click="brate1_clickHandler(event)" />
				<s:Image id="brate2" width="30" height="30" smooth="true" source="assets/empty_star.png" click="brate2_clickHandler(event)" />
				<s:Image id="brate3" width="30" height="30" smooth="true" source="assets/empty_star.png" click="brate3_clickHandler(event)" />
				<s:Image id="brate4" width="30" height="30" smooth="true" source="assets/empty_star.png" click="brate4_clickHandler(event)" />
				<s:Image id="brate5" width="30" height="30" smooth="true" source="assets/empty_star.png" click="brate5_clickHandler(event)" />
				<s:Image id="btweet" width="42" height="42" smooth="true" source="assets/twitter_logo.jpeg" click="tweeter_clickHandler(event)"/>		
			</s:HGroup>
		</s:BorderContainer>
		<s:HGroup height="161" paddingTop="10" verticalAlign="top">
			<!--
			PlayList Management
			-->
			<s:Group height="161">			
				<s:VGroup height="143" horizontalAlign="left">
					<s:BorderContainer width="361" backgroundColor="0xcccccc" borderWeight="0">
						<s:HGroup width="364" paddingBottom="3" paddingLeft="3" paddingRight="3"
								  paddingTop="3" verticalAlign="middle">
							<s:Label fontSize="14" fontWeight="bold" text="Playlists"/>
							<s:TextInput id="textInputPlayList" width="134"/>
							<s:Button width="45" height="30" click="AddPlayList(event)"
									  icon="assets/Button-Add-icon.png"/>
							<s:Button width="45" height="30" click="RemovePlayList(event)"
									  icon="assets/Button-Delete-icon.png"/>
						</s:HGroup>
					</s:BorderContainer>	
					<s:List id="playListList" width="362" height="115" change="PlayListChangedHandler(event);">
						<mx:ArrayCollection id="playListArray"></mx:ArrayCollection>
					</s:List>
				</s:VGroup>
			</s:Group>
			<!--
			Music Management
			-->
			<s:Group>
				<s:VGroup horizontalAlign="left">
					<s:BorderContainer backgroundColor="0xcccccc" borderWeight="0" >
						<s:HGroup width="301" paddingTop="3" paddingBottom="3" paddingLeft="3" paddingRight="3" verticalAlign="middle">
							<s:Label fontSize="14" fontWeight="bold" text="Musics"/>							
							<s:Button width="45" height="30" click="AddMusic(event)"
									  icon="assets/Folder-Explorer-icon.png"/>
							<s:Button width="45" height="30" click="RemoveMusic(event)"
									  icon="assets/Button-Delete-icon.png"/>
						</s:HGroup>
					</s:BorderContainer>
					<s:List id="musicList" width="302" height="115"> 
						<mx:ArrayCollection id="musicArray"></mx:ArrayCollection>
					</s:List>					
				</s:VGroup>
			</s:Group>
		</s:HGroup>
	</s:Group>
</s:WindowedApplication>
